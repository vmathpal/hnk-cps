{"version":3,"file":"unpackXlsxFileBrowser.js","names":["unpackXlsxFile","file","startedAt","Date","now","arrayBuffer","then","fileBuffer","archive","Uint8Array","contents","unzipSync","getContents","unzippedFiles","Object","keys","key","strFromU8"],"sources":["../../source/read/unpackXlsxFileBrowser.js"],"sourcesContent":["import { unzipSync, strFromU8 } from 'fflate'\r\n\r\n/**\r\n * Reads XLSX file in a browser.\r\n * @param  {File} file - A `File` object being uploaded in the browser.\r\n * @return {Promise} Resolves to an object holding XLSX file entries.\r\n */\r\nexport default function unpackXlsxFile(file) {\r\n\tconst startedAt = Date.now()\r\n\treturn file.arrayBuffer().then((fileBuffer) => {\r\n\t\tconst archive = new Uint8Array(fileBuffer)\r\n\t\tconst contents = unzipSync(archive)\r\n\t\treturn getContents(contents)\r\n\t\t// return new Promise((resolve, reject) => {\r\n\t\t// \tunzip(archive, (error, contents) => {\r\n\t\t// \t\tif (error) {\r\n\t\t// \t\t\treturn reject(error)\r\n\t\t// \t\t}\r\n\t\t// \t\treturn resolve(getContents(contents))\r\n\t\t// \t})\r\n\t\t// })\r\n\t})\r\n}\r\n\r\nfunction getContents(contents) {\r\n\tconst unzippedFiles = []\r\n\tfor (const key of Object.keys(contents)) {\r\n\t\tunzippedFiles[key] = strFromU8(contents[key])\r\n\t}\r\n\treturn unzippedFiles\r\n}"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACe,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;EAC5C,IAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;EACA,OAAOH,IAAI,CAACI,WAAL,GAAmBC,IAAnB,CAAwB,UAACC,UAAD,EAAgB;IAC9C,IAAMC,OAAO,GAAG,IAAIC,UAAJ,CAAeF,UAAf,CAAhB;IACA,IAAMG,QAAQ,GAAG,IAAAC,iBAAA,EAAUH,OAAV,CAAjB;IACA,OAAOI,WAAW,CAACF,QAAD,CAAlB,CAH8C,CAI9C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA,CAZM,CAAP;AAaA;;AAED,SAASE,WAAT,CAAqBF,QAArB,EAA+B;EAC9B,IAAMG,aAAa,GAAG,EAAtB;;EACA,gCAAkBC,MAAM,CAACC,IAAP,CAAYL,QAAZ,CAAlB,kCAAyC;IAApC,IAAMM,GAAG,mBAAT;IACJH,aAAa,CAACG,GAAD,CAAb,GAAqB,IAAAC,iBAAA,EAAUP,QAAQ,CAACM,GAAD,CAAlB,CAArB;EACA;;EACD,OAAOH,aAAP;AACA"}